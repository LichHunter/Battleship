type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: "package battleship;\n\nimport java.util.Locale;\nimport java.util.Scanner;\n\
    \npublic class Main {\n    private static String[][] FIELD = new String[11][11];\n\
    \n    public static void main(String[] args) {\n        Scanner scanner = new\
    \ Scanner(System.in);\n        Ship[] ships = new Ship[]{new Ship(\"Aircraft Carrier\"\
    , \"carrier\", 5),\n                new Ship(\"Battleship\",\"battleship\", 4),\n\
    \                new Ship(\"Submarine\", \"submarine\", 3),\n                new\
    \ Ship(\"Cruiser\", \"cruiser\", 3),\n                new Ship(\"Destroyer\",\
    \ \"destroyer\", 2)};\n\n        createField();\n        showField();\n\n    \
    \    int i = 0;\n        while (i != 5){\n            System.out.format(\"Enter\
    \ the coordinates of the %s (%d cells): \\n\", ships[i].getName(),\n         \
    \           ships[i].getSize());\n            String[] coordinates = scanner.nextLine().toLowerCase(Locale.ROOT).split(\"\
    \ \");\n\n            try {\n                putShipOnTheField(ships[i].getCode(),\
    \ coordinates[0], coordinates[1]);\n            } catch (IllegalStateException\
    \ e) {\n                System.out.println(e.getMessage());\n                continue;\n\
    \            }\n\n            showField();\n            i++;\n        }\n    }\n\
    \n    /**\n     */\n    /**\n     * Method will check whether coordinates are\
    \ right and put given ship on the field\n     * @param ship string which contains\
    \ name of ship(carrier, battleship, submarine, cruiser, destroyer)\n     * @param\
    \ firstCoordinate string which contains coordinates of the ship beginning (f3,\
    \ a1, d5)\n     * @param secondCoordinate string which contains coordinates of\
    \ the ship ending (f3, a1, d5)\n     * @throws IllegalStateException if coordinates\
    \ were not correct\n     * or was not able to convert letter from coordinate to\
    \ number\n     */\n    private static void putShipOnTheField(String ship, String\
    \ firstCoordinate, String secondCoordinate) throws IllegalStateException {\n \
    \       //check whether coordinates are correct\n\t    if (!checkCoordinates(ship,\
    \ firstCoordinate, secondCoordinate))\n\t        throw new IllegalStateException(\"\
    Error! Wrong coordinates\");\n\t    //check whether user can place ship in that\
    \ position\n\t    if (!checkShipDisplacement(firstCoordinate, secondCoordinate))\n\
    \            throw new IllegalStateException(\"Error! Too close to another ship\"\
    );\n\n        //put ship on field\n        try {\n            if (firstCoordinate.charAt(0)\
    \ == secondCoordinate.charAt(0)) {\n                int row = letterToNumber(firstCoordinate.charAt(0));\n\
    \                int num1 = Integer.parseInt(firstCoordinate.substring(1));\n\
    \                int num2 = Integer.parseInt(secondCoordinate.substring(1));\n\
    \                int beginning = Math.min(num1, num2);\n                int end\
    \ = Math.max(num1, num2);\n\n                for (int i = beginning; i <= end;\
    \ i++) {\n                    FIELD[row][i] = \"O\";\n                }\n    \
    \        } else {\n            \tint num1 = letterToNumber(firstCoordinate.charAt(0));\n\
    \            \tint num2 = letterToNumber(secondCoordinate.charAt(0));\n      \
    \          int beginning = Math.min(num1, num2);\n                int end = Math.max(num1,\
    \ num2);\n                int column = Integer.parseInt(firstCoordinate.substring(1));\n\
    \n                for (int i = beginning; i <= end; i++) {\n                 \
    \   FIELD[i][column] = \"O\";\n                }\n            }\n        } catch\
    \ (IllegalArgumentException e) {\n            throw new IllegalStateException(e.getMessage());\n\
    \        }\n    }\n\n    /**\n     * Method will check whether coordinates are\
    \ correct\n     * @param ship string which contains name of ship(carrier, battleship,\
    \ submarine, cruiser, destroyer)\n     * @param firstCoordinate string which contains\
    \ coordinates of the ship beginning (f3, a1, d5)\n     * @param secondCoordinate\
    \ string which contains coordinates of the ship ending (f3, a1, d5)\n     * @return\
    \ true -> correct, false -> wrong\n     */\n    private static boolean checkCoordinates(String\
    \ ship, String firstCoordinate, String secondCoordinate) {\n        //check if\
    \ coordinates are equal\n        if (firstCoordinate.matches(secondCoordinate))\
    \ return false;\n\n        //check if coordinates are diagonal\n        if (firstCoordinate.charAt(0)\
    \ != secondCoordinate.charAt(0)\n                && !firstCoordinate.substring(1).equals(secondCoordinate.substring(1)))\n\
    \            return false;\n\n        //check length of ship\n        int length;\n\
    \        int firstNum;\n        int secondNum;\n\n        if (firstCoordinate.charAt(1)\
    \ == secondCoordinate.charAt(1)){\n            firstNum = letterToNumber(firstCoordinate.charAt(0));\n\
    \            secondNum = letterToNumber(secondCoordinate.charAt(0));\n       \
    \ } else {\n            firstNum = Integer.parseInt(firstCoordinate.substring(1));\n\
    \            secondNum = Integer.parseInt(secondCoordinate.substring(1));\n  \
    \      }\n\n        length = secondNum > firstNum ? secondNum - firstNum : firstNum\
    \ - secondNum;\n\n        switch (ship) {\n            case \"carrier\":\n   \
    \         \tif (length != 4) return false;\n            \tbreak;\n           \
    \ case \"battleship\":\n                if (length != 3) return false;\n     \
    \           break;\n            case \"submarine\":\n            case \"cruiser\"\
    :\n                if (length != 2) return false;\n                break;\n  \
    \          case \"destroyer\":\n            \tif (length != 1) return false;\n\
    \                break;\n        }\n\n        return true;\n    }\n\n    private\
    \ static boolean checkShipDisplacement(String firstCoordinate, String secondCoordinate)\
    \ {\n        return tmpName(letterToNumber(firstCoordinate.charAt(0)), Integer.parseInt(firstCoordinate.substring(1)))\n\
    \                && tmpName(letterToNumber(secondCoordinate.charAt(0)), Integer.parseInt(secondCoordinate.substring(1)));\n\
    \    }\n\n    //TODO rename\n    private static boolean tmpName(int i, int j)\
    \ {\n        if (i != 0 && i != FIELD.length - 1) {\n            if (j != 0 &&\
    \ j != FIELD[0].length - 1) {\n                //i-1 j\n                if (\"\
    O\".equals(FIELD[i - 1][j])) return false;\n                //i+1 j\n        \
    \        if (\"O\".equals(FIELD[i + 1][j])) return false;\n                //i\
    \ j-1\n                if (\"O\".equals(FIELD[i][j - 1])) return false;\n    \
    \            //i j+1\n                return !\"O\".equals(FIELD[i][j + 1]);\n\
    \            } else if (j == 0) {\n                //i-1 j\n                if\
    \ (\"O\".equals(FIELD[i - 1][j])) return false;\n                //i+1 j\n   \
    \             if (\"O\".equals(FIELD[i + 1][j])) return false;\n             \
    \   //i j+1\n                return !\"O\".equals(FIELD[i][j + 1]);\n        \
    \    } else {\n                //i-1 j\n                if (\"O\".equals(FIELD[i\
    \ - 1][j])) return false;\n                //i+1 j\n                if (\"O\"\
    .equals(FIELD[i + 1][j])) return false;\n                //i j-1\n           \
    \     return !\"O\".equals(FIELD[i][j - 1]);\n            }\n        } else if\
    \ (i == 0){\n            if (j != 0 && j != FIELD[0].length - 1) {\n         \
    \       //i+1 j\n                if (\"O\".equals(FIELD[i + 1][j])) return false;\n\
    \                //i j-1\n                if (\"O\".equals(FIELD[i][j - 1])) return\
    \ false;\n                //i j+1\n                return !\"O\".equals(FIELD[i][j\
    \ + 1]);\n            } else if (j == 0) {\n                //i+1 j\n        \
    \        if (\"O\".equals(FIELD[i + 1][j])) return false;\n                //i\
    \ j+1\n                return !\"O\".equals(FIELD[i][j + 1]);\n            } else\
    \ {\n                //i+1 j\n                if (\"O\".equals(FIELD[i + 1][j]))\
    \ return false;\n                //i j-1\n                return !\"O\".equals(FIELD[i][j\
    \ - 1]);\n            }\n        } else {\n            if (j != 0 && j != FIELD[0].length\
    \ - 1) {\n                //i-1 j\n                if (\"O\".equals(FIELD[i -\
    \ 1][j])) return false;\n                //i j-1\n                if (\"O\".equals(FIELD[i][j\
    \ - 1])) return false;\n                //i j+1\n                return !\"O\"\
    .equals(FIELD[i][j + 1]);\n            } else if (j == 0) {\n                //i-1\
    \ j\n                if (\"O\".equals(FIELD[i - 1][j])) return false;\n      \
    \          //i j+1\n                return !\"O\".equals(FIELD[i][j + 1]);\n \
    \           } else {\n                //i-1 j\n                if (\"O\".equals(FIELD[i\
    \ - 1][j])) return false;\n                //i j-1\n                return !\"\
    O\".equals(FIELD[i][j - 1]);\n            }\n        }\n    }\n\n    /**\n   \
    \  * Method will output FIELD array to the console\n     */\n    private static\
    \ void showField() {\n        for (String[] row : FIELD) {\n            for (String\
    \ cell : row) {\n                System.out.print(cell + \" \");\n           \
    \ }\n            System.out.println();\n        }\n    }\n\n    /**\n     * Method\
    \ will fill FIELD array with appropriate date\n     */\n    private static void\
    \ createField() {\n        //fill first row of FIELD with numbers\n        FIELD[0]\
    \ = new String[]{\" \", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"10\"};\n        //array contains letters which will be at the beginning\
    \ of every row\n        String[] letters = new String[]{\"A\",\"B\",\"C\",\"D\"\
    ,\"E\",\"F\",\"G\",\"H\",\"I\",\"J\"};\n\n        //fill FIELD\n        for (int\
    \ i = 1; i < FIELD.length; i++) {\n            FIELD[i][0] = letters[i - 1];\n\
    \n            for (int j = 1; j < FIELD[i].length; j++) {\n                FIELD[i][j]\
    \ = \"~\";\n            }\n        }\n    }\n\n    /**\n     * Convert letter\
    \ to number\n     * @param letter char with letter (a,b,c,d,e,f,g,h,i,j)\n   \
    \  * @return integer with number that corresponds to given letter\n     * @throws\
    \ IllegalArgumentException if was not able to convert letter to number\n     */\n\
    \    private static int letterToNumber(char letter) throws IllegalArgumentException\
    \ {\n        switch (letter) {\n            case 'a':\n                return\
    \ 1;\n            case 'b':\n                return 2;\n            case 'c':\n\
    \                return 3;\n            case 'd':\n                return 4;\n\
    \            case 'e':\n                return 5;\n            case 'f':\n   \
    \             return 6;\n            case 'g':\n                return 7;\n  \
    \          case 'h':\n                return 8;\n            case 'i':\n     \
    \           return 9;\n            case 'j':\n                return 10;\n   \
    \         default:\n                throw new IllegalArgumentException(\"Error!\
    \ Wrong letter: \" + letter);\n        }\n    }\n}\n"
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import battleship.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should report an error " +
                        "if there is an input mistake. " +
                        "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("A1");
            checkShot(getFieldMatrix(output), "A1", output);

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should report an error " +
                        "if there is an input mistake. " +
                        "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output) || !output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("E4");
            checkMissing(getFieldMatrix(output), "E4", output);

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                    "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/125/stages/664/implement#comment
status: Solved
record: 2
